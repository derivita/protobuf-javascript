import { ByteString } from '../../bytestring.js';
import { Int64 } from '../../int64.js';
import { InternalMessage } from '../../kernel/internal_message.js';
import { Kernel } from '../../kernel/kernel.js';
/**
 * A protobuf message implemented as a Kernel wrapper.
 */
declare class TestMessage implements InternalMessage {
    static createEmpty(): TestMessage;
    static instanceCreator(kernel: Kernel): TestMessage;
    constructor(kernel: Kernel);
    internalGetKernel(): Kernel;
    serialize(): ArrayBuffer;
    getBoolWithDefault(fieldNumber: number, defaultValue?: boolean): boolean;
    getBytesWithDefault(fieldNumber: number, defaultValue?: ByteString): ByteString;
    getDoubleWithDefault(fieldNumber: number, defaultValue?: number): number;
    getFixed32WithDefault(fieldNumber: number, defaultValue?: number): number;
    getFixed64WithDefault(fieldNumber: number, defaultValue?: Int64): Int64;
    getFloatWithDefault(fieldNumber: number, defaultValue?: number): number;
    getInt32WithDefault(fieldNumber: number, defaultValue?: number): number;
    getInt64WithDefault(fieldNumber: number, defaultValue?: Int64): Int64;
    getSfixed32WithDefault(fieldNumber: number, defaultValue?: number): number;
    getSfixed64WithDefault(fieldNumber: number, defaultValue?: Int64): Int64;
    getSint32WithDefault(fieldNumber: number, defaultValue?: number): number;
    getSint64WithDefault(fieldNumber: number, defaultValue?: Int64): Int64;
    getStringWithDefault(fieldNumber: number, defaultValue?: string): string;
    getUint32WithDefault(fieldNumber: number, defaultValue?: number): number;
    getUint64WithDefault(fieldNumber: number, defaultValue?: Int64): Int64;
    getMessageOrNull<T = any>(fieldNumber: number, instanceCreator: () => (T | null)): T | null;
    getMessageAttach<T = any>(fieldNumber: number, instanceCreator: () => (T | null)): T | null;
    getMessage<T = any>(fieldNumber: number, instanceCreator: () => (T | null)): T | null;
    getMessageAccessorOrNull<T = any>(fieldNumber: number): Kernel | null;
    getRepeatedBoolElement(fieldNumber: number, index: number): boolean;
    getRepeatedBoolIterable(fieldNumber: number): Iterable<boolean>;
    getRepeatedBoolSize(fieldNumber: number): number;
    getRepeatedDoubleElement(fieldNumber: number, index: number): number;
    getRepeatedDoubleIterable(fieldNumber: number): Iterable<number>;
    getRepeatedDoubleSize(fieldNumber: number): number;
    getRepeatedFixed32Element(fieldNumber: number, index: number): number;
    getRepeatedFixed32Iterable(fieldNumber: number): Iterable<number>;
    getRepeatedFixed32Size(fieldNumber: number): number;
    getRepeatedFixed64Element(fieldNumber: number, index: number): Int64;
    getRepeatedFixed64Iterable(fieldNumber: number): Iterable<Int64>;
    getRepeatedFixed64Size(fieldNumber: number): number;
    getRepeatedFloatElement(fieldNumber: number, index: number): number;
    getRepeatedFloatIterable(fieldNumber: number): Iterable<number>;
    getRepeatedFloatSize(fieldNumber: number): number;
    getRepeatedInt32Element(fieldNumber: number, index: number): number;
    getRepeatedInt32Iterable(fieldNumber: number): Iterable<number>;
    getRepeatedInt32Size(fieldNumber: number): number;
    getRepeatedInt64Element(fieldNumber: number, index: number): Int64;
    getRepeatedInt64Iterable(fieldNumber: number): Iterable<Int64>;
    getRepeatedInt64Size(fieldNumber: number): number;
    getRepeatedSfixed32Element(fieldNumber: number, index: number): number;
    getRepeatedSfixed32Iterable(fieldNumber: number): Iterable<number>;
    getRepeatedSfixed32Size(fieldNumber: number): number;
    getRepeatedSfixed64Element(fieldNumber: number, index: number): Int64;
    getRepeatedSfixed64Iterable(fieldNumber: number): Iterable<Int64>;
    getRepeatedSfixed64Size(fieldNumber: number): number;
    getRepeatedSint32Element(fieldNumber: number, index: number): number;
    getRepeatedSint32Iterable(fieldNumber: number): Iterable<number>;
    getRepeatedSint32Size(fieldNumber: number): number;
    getRepeatedSint64Element(fieldNumber: number, index: number): Int64;
    getRepeatedSint64Iterable(fieldNumber: number): Iterable<Int64>;
    getRepeatedSint64Size(fieldNumber: number): number;
    getRepeatedUint32Element(fieldNumber: number, index: number): number;
    getRepeatedUint32Iterable(fieldNumber: number): Iterable<number>;
    getRepeatedUint32Size(fieldNumber: number): number;
    getRepeatedUint64Element(fieldNumber: number, index: number): Int64;
    getRepeatedUint64Iterable(fieldNumber: number): Iterable<Int64>;
    getRepeatedUint64Size(fieldNumber: number): number;
    getRepeatedBytesElement(fieldNumber: number, index: number): ByteString;
    getRepeatedBytesIterable(fieldNumber: number): Iterable<ByteString>;
    getRepeatedBytesSize(fieldNumber: number): number;
    getRepeatedStringElement(fieldNumber: number, index: number): string;
    getRepeatedStringIterable(fieldNumber: number): Iterable<string>;
    getRepeatedStringSize(fieldNumber: number): number;
    getRepeatedMessageElement<T = any>(fieldNumber: number, instanceCreator: () => (T | null), index: number): T | null;
    getRepeatedMessageIterable<T = any>(fieldNumber: number, instanceCreator: () => (T | null)): Iterable<T | null>;
    getRepeatedMessageAccessorIterable<T = any>(fieldNumber: number): Iterable<Kernel>;
    getRepeatedMessageSize<T = any>(fieldNumber: number, instanceCreator: () => (T | null)): number;
    setBool(fieldNumber: number, value: boolean): void;
    setBytes(fieldNumber: number, value: ByteString): void;
    setDouble(fieldNumber: number, value: number): void;
    setFixed32(fieldNumber: number, value: number): void;
    setFixed64(fieldNumber: number, value: Int64): void;
    setFloat(fieldNumber: number, value: number): void;
    setInt32(fieldNumber: number, value: number): void;
    setInt64(fieldNumber: number, value: Int64): void;
    setSfixed32(fieldNumber: number, value: number): void;
    setSfixed64(fieldNumber: number, value: Int64): void;
    setSint32(fieldNumber: number, value: number): void;
    setSint64(fieldNumber: number, value: Int64): void;
    setString(fieldNumber: number, value: string): void;
    setUint32(fieldNumber: number, value: number): void;
    setUint64(fieldNumber: number, value: Int64): void;
    setMessage<T = any>(fieldNumber: number, value: T | null): void;
    addPackedBoolElement(fieldNumber: number, value: boolean): void;
    addPackedBoolIterable(fieldNumber: number, values: Iterable<boolean>): void;
    addUnpackedBoolElement(fieldNumber: number, value: boolean): void;
    addUnpackedBoolIterable(fieldNumber: number, values: Iterable<boolean>): void;
    setPackedBoolElement(fieldNumber: number, index: number, value: boolean): void;
    setPackedBoolIterable(fieldNumber: number, values: Iterable<boolean>): void;
    setUnpackedBoolElement(fieldNumber: number, index: number, value: boolean): void;
    setUnpackedBoolIterable(fieldNumber: number, values: Iterable<boolean>): void;
    addPackedDoubleElement(fieldNumber: number, value: number): void;
    addPackedDoubleIterable(fieldNumber: number, values: Iterable<number>): void;
    addUnpackedDoubleElement(fieldNumber: number, value: number): void;
    addUnpackedDoubleIterable(fieldNumber: number, values: Iterable<number>): void;
    setPackedDoubleElement(fieldNumber: number, index: number, value: number): void;
    setPackedDoubleIterable(fieldNumber: number, values: Iterable<number>): void;
    setUnpackedDoubleElement(fieldNumber: number, index: number, value: number): void;
    setUnpackedDoubleIterable(fieldNumber: number, values: Iterable<number>): void;
    addPackedFixed32Element(fieldNumber: number, value: number): void;
    addPackedFixed32Iterable(fieldNumber: number, values: Iterable<number>): void;
    addUnpackedFixed32Element(fieldNumber: number, value: number): void;
    addUnpackedFixed32Iterable(fieldNumber: number, values: Iterable<number>): void;
    setPackedFixed32Element(fieldNumber: number, index: number, value: number): void;
    setPackedFixed32Iterable(fieldNumber: number, values: Iterable<number>): void;
    setUnpackedFixed32Element(fieldNumber: number, index: number, value: number): void;
    setUnpackedFixed32Iterable(fieldNumber: number, values: Iterable<number>): void;
    addPackedFixed64Element(fieldNumber: number, value: Int64): void;
    addPackedFixed64Iterable(fieldNumber: number, values: Iterable<Int64>): void;
    addUnpackedFixed64Element(fieldNumber: number, value: Int64): void;
    addUnpackedFixed64Iterable(fieldNumber: number, values: Iterable<Int64>): void;
    setPackedFixed64Element(fieldNumber: number, index: number, value: Int64): void;
    setPackedFixed64Iterable(fieldNumber: number, values: Iterable<Int64>): void;
    setUnpackedFixed64Element(fieldNumber: number, index: number, value: Int64): void;
    setUnpackedFixed64Iterable(fieldNumber: number, values: Iterable<Int64>): void;
    addPackedFloatElement(fieldNumber: number, value: number): void;
    addPackedFloatIterable(fieldNumber: number, values: Iterable<number>): void;
    addUnpackedFloatElement(fieldNumber: number, value: number): void;
    addUnpackedFloatIterable(fieldNumber: number, values: Iterable<number>): void;
    setPackedFloatElement(fieldNumber: number, index: number, value: number): void;
    setPackedFloatIterable(fieldNumber: number, values: Iterable<number>): void;
    setUnpackedFloatElement(fieldNumber: number, index: number, value: number): void;
    setUnpackedFloatIterable(fieldNumber: number, values: Iterable<number>): void;
    addPackedInt32Element(fieldNumber: number, value: number): void;
    addPackedInt32Iterable(fieldNumber: number, values: Iterable<number>): void;
    addUnpackedInt32Element(fieldNumber: number, value: number): void;
    addUnpackedInt32Iterable(fieldNumber: number, values: Iterable<number>): void;
    setPackedInt32Element(fieldNumber: number, index: number, value: number): void;
    setPackedInt32Iterable(fieldNumber: number, values: Iterable<number>): void;
    setUnpackedInt32Element(fieldNumber: number, index: number, value: number): void;
    setUnpackedInt32Iterable(fieldNumber: number, values: Iterable<number>): void;
    addPackedInt64Element(fieldNumber: number, value: Int64): void;
    addPackedInt64Iterable(fieldNumber: number, values: Iterable<Int64>): void;
    addUnpackedInt64Element(fieldNumber: number, value: Int64): void;
    addUnpackedInt64Iterable(fieldNumber: number, values: Iterable<Int64>): void;
    setPackedInt64Element(fieldNumber: number, index: number, value: Int64): void;
    setPackedInt64Iterable(fieldNumber: number, values: Iterable<Int64>): void;
    setUnpackedInt64Element(fieldNumber: number, index: number, value: Int64): void;
    setUnpackedInt64Iterable(fieldNumber: number, values: Iterable<Int64>): void;
    addPackedSfixed32Element(fieldNumber: number, value: number): void;
    addPackedSfixed32Iterable(fieldNumber: number, values: Iterable<number>): void;
    addUnpackedSfixed32Element(fieldNumber: number, value: number): void;
    addUnpackedSfixed32Iterable(fieldNumber: number, values: Iterable<number>): void;
    setPackedSfixed32Element(fieldNumber: number, index: number, value: number): void;
    setPackedSfixed32Iterable(fieldNumber: number, values: Iterable<number>): void;
    setUnpackedSfixed32Element(fieldNumber: number, index: number, value: number): void;
    setUnpackedSfixed32Iterable(fieldNumber: number, values: Iterable<number>): void;
    addPackedSfixed64Element(fieldNumber: number, value: Int64): void;
    addPackedSfixed64Iterable(fieldNumber: number, values: Iterable<Int64>): void;
    addUnpackedSfixed64Element(fieldNumber: number, value: Int64): void;
    addUnpackedSfixed64Iterable(fieldNumber: number, values: Iterable<Int64>): void;
    setPackedSfixed64Element(fieldNumber: number, index: number, value: Int64): void;
    setPackedSfixed64Iterable(fieldNumber: number, values: Iterable<Int64>): void;
    setUnpackedSfixed64Element(fieldNumber: number, index: number, value: Int64): void;
    setUnpackedSfixed64Iterable(fieldNumber: number, values: Iterable<Int64>): void;
    addPackedSint32Element(fieldNumber: number, value: number): void;
    addPackedSint32Iterable(fieldNumber: number, values: Iterable<number>): void;
    addUnpackedSint32Element(fieldNumber: number, value: number): void;
    addUnpackedSint32Iterable(fieldNumber: number, values: Iterable<number>): void;
    setPackedSint32Element(fieldNumber: number, index: number, value: number): void;
    setPackedSint32Iterable(fieldNumber: number, values: Iterable<number>): void;
    setUnpackedSint32Element(fieldNumber: number, index: number, value: number): void;
    setUnpackedSint32Iterable(fieldNumber: number, values: Iterable<number>): void;
    addPackedSint64Element(fieldNumber: number, value: Int64): void;
    addPackedSint64Iterable(fieldNumber: number, values: Iterable<Int64>): void;
    addUnpackedSint64Element(fieldNumber: number, value: Int64): void;
    addUnpackedSint64Iterable(fieldNumber: number, values: Iterable<Int64>): void;
    setPackedSint64Element(fieldNumber: number, index: number, value: Int64): void;
    setPackedSint64Iterable(fieldNumber: number, values: Iterable<Int64>): void;
    setUnpackedSint64Element(fieldNumber: number, index: number, value: Int64): void;
    setUnpackedSint64Iterable(fieldNumber: number, values: Iterable<Int64>): void;
    addPackedUint32Element(fieldNumber: number, value: number): void;
    addPackedUint32Iterable(fieldNumber: number, values: Iterable<number>): void;
    addUnpackedUint32Element(fieldNumber: number, value: number): void;
    addUnpackedUint32Iterable(fieldNumber: number, values: Iterable<number>): void;
    setPackedUint32Element(fieldNumber: number, index: number, value: number): void;
    setPackedUint32Iterable(fieldNumber: number, values: Iterable<number>): void;
    setUnpackedUint32Element(fieldNumber: number, index: number, value: number): void;
    setUnpackedUint32Iterable(fieldNumber: number, values: Iterable<number>): void;
    addPackedUint64Element(fieldNumber: number, value: Int64): void;
    addPackedUint64Iterable(fieldNumber: number, values: Iterable<Int64>): void;
    addUnpackedUint64Element(fieldNumber: number, value: Int64): void;
    addUnpackedUint64Iterable(fieldNumber: number, values: Iterable<Int64>): void;
    setPackedUint64Element(fieldNumber: number, index: number, value: Int64): void;
    setPackedUint64Iterable(fieldNumber: number, values: Iterable<Int64>): void;
    setUnpackedUint64Element(fieldNumber: number, index: number, value: Int64): void;
    setUnpackedUint64Iterable(fieldNumber: number, values: Iterable<Int64>): void;
    setRepeatedBytesIterable(fieldNumber: number, values: Iterable<ByteString>): void;
    addRepeatedBytesIterable(fieldNumber: number, values: Iterable<ByteString>): void;
    setRepeatedBytesElement(fieldNumber: number, index: number, value: ByteString): void;
    addRepeatedBytesElement(fieldNumber: number, value: ByteString): void;
    setRepeatedStringIterable(fieldNumber: number, values: Iterable<string>): void;
    addRepeatedStringIterable(fieldNumber: number, values: Iterable<string>): void;
    setRepeatedStringElement(fieldNumber: number, index: number, value: string): void;
    addRepeatedStringElement(fieldNumber: number, value: string): void;
    setRepeatedMessageIterable<T = any>(fieldNumber: number, values: Iterable<T | null>): void;
    addRepeatedMessageIterable<T = any>(fieldNumber: number, values: Iterable<T | null>, instanceCreator: () => (T | null)): void;
    setRepeatedMessageElement<T = any>(fieldNumber: number, value: T | null, instanceCreator: () => (T | null), index: number): void;
    addRepeatedMessageElement<T = any>(fieldNumber: number, value: T | null, instanceCreator: () => (T | null)): void;
}
export { TestMessage };
